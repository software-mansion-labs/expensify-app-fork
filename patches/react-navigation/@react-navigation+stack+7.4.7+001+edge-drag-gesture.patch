diff --git a/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.js b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.js
new file mode 100644
index 0000000..f6edb80
--- /dev/null
+++ b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.js
@@ -0,0 +1,46 @@
+"use strict";
+
+let isInitialized = false;
+let justFinishedEdgeGestureFromLeft = false;
+let expectingTouchend = false;
+
+/// This returns information if the user just performed edge gesture on iOS safari to navigate in the browser history.
+export const getIsEdgeDragGesture = () => {
+  return expectingTouchend || justFinishedEdgeGestureFromLeft;
+};
+
+// We need to manualy reset this flag after deciding if there should be animation for navigation.
+export const resetExpectingTouchendWithDelay = () => {
+  setTimeout(() => {
+    expectingTouchend = false;
+  }, 100);
+};
+export const maybeInitializeEdgeDragGestureMonitor = () => {
+  if (isInitialized) {
+    return;
+  }
+  isInitialized = true;
+  let timer;
+
+  // Gestures that would trigger navigation forward are broken on iOS safari.
+  // They don't have touchend event fired so we can look at expectingTouchEnd flag to detect if we should run animation.
+  const handleTouchStart = () => {
+    expectingTouchend = true;
+  };
+  const handleTouchEnd = e => {
+    let changedTouches;
+    const pageX = (changedTouches = e.changedTouches[0]) === null || changedTouches === void 0 ? void 0 : changedTouches.pageX;
+    // PageX for gesture that would trigger navigation back is negative.
+    if (pageX < 0) {
+      if (timer) {
+        clearTimeout(timer);
+      }
+      justFinishedEdgeGestureFromLeft = true;
+      timer = setTimeout(() => justFinishedEdgeGestureFromLeft = false, 100);
+    }
+    expectingTouchend = false;
+  };
+  document.addEventListener('touchstart', handleTouchStart);
+  document.addEventListener('touchend', handleTouchEnd);
+};
+//# sourceMappingURL=edgeDragGestureMonitor.js.map
\ No newline at end of file
diff --git a/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.native.js b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.native.js
new file mode 100644
index 0000000..9c7b703
--- /dev/null
+++ b/node_modules/@react-navigation/stack/lib/module/utils/edgeDragGestureMonitor.native.js
@@ -0,0 +1,8 @@
+"use strict";
+
+// We don't need edgeDragGestureMonitor for native platforms.
+
+export const getIsEdgeDragGesture = () => false;
+export const resetExpectingTouchendWithDelay = () => {};
+export const maybeInitializeEdgeDragGestureMonitor = () => {};
+//# sourceMappingURL=edgeDragGestureMonitor.native.js.map
\ No newline at end of file
diff --git a/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js b/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
index b51719f..8782527 100644
--- a/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
+++ b/node_modules/@react-navigation/stack/lib/module/views/Stack/Card.js
@@ -4,6 +4,7 @@ import Color from 'color';
 import * as React from 'react';
 import { Animated, InteractionManager, Platform, StyleSheet, View } from 'react-native';
 import { CardAnimationContext } from "../../utils/CardAnimationContext.js";
+import { getIsEdgeDragGesture, resetExpectingTouchendWithDelay } from '../../utils/edgeDragGestureMonitor';
 import { getDistanceForDirection } from "../../utils/getDistanceForDirection.js";
 import { getInvertedMultiplier } from "../../utils/getInvertedMultiplier.js";
 import { getShadowStyle } from "../../utils/getShadowStyle.js";
@@ -147,6 +148,8 @@ export class Card extends React.Component {
       this.handleStartInteraction();
       animation(gesture, {
         ...spec.config,
+        // Detecting if the user used swipe gesture on iOS safari to trigger navigation in the browser history.
+        duration: getIsEdgeDragGesture() ? 0 : spec.config && 'duration' in spec.config ? spec.config.duration : undefined,
         velocity,
         toValue,
         useNativeDriver,
@@ -156,6 +159,9 @@ export class Card extends React.Component {
       }) => {
         this.handleEndInteraction();
         clearTimeout(this.pendingGestureCallback);
+
+        // We need to reset edgeDragGestureMonitor manually because of broken events on iOS safari.
+        resetExpectingTouchendWithDelay();
         if (finished) {
           onFinish();
         }
diff --git a/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js b/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
index 6ebc81a..23adb65 100644
--- a/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
+++ b/node_modules/@react-navigation/stack/lib/module/views/Stack/CardStack.js
@@ -5,6 +5,7 @@ import * as React from 'react';
 import { Animated, Platform, StyleSheet, View } from 'react-native';
 import { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from "../../TransitionConfigs/CardStyleInterpolators.js";
 import { BottomSheetAndroid, DefaultTransition, FadeFromBottomAndroid, FadeFromRightAndroid, ModalFadeTransition, ModalSlideFromBottomIOS, ModalTransition, RevealFromBottomAndroid, ScaleFromCenterAndroid, SlideFromLeftIOS, SlideFromRightIOS } from "../../TransitionConfigs/TransitionPresets.js";
+import { maybeInitializeEdgeDragGestureMonitor } from '../../utils/edgeDragGestureMonitor';
 import { findLastIndex } from "../../utils/findLastIndex.js";
 import { getDistanceForDirection } from "../../utils/getDistanceForDirection.js";
 import { getModalRouteKeys } from "../../utils/getModalRoutesKeys.js";
@@ -208,6 +209,8 @@ export class CardStack extends React.Component {
   }
   constructor(props) {
     super(props);
+    // Gesture monitor is only needed on iOS safari to detect if the user performed edge swipe gesture to to navigate in the browser history.
+    maybeInitializeEdgeDragGestureMonitor();
     this.state = {
       routes: [],
       scenes: [],
