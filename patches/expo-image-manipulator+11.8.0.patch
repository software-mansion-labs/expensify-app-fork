diff --git a/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js b/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js
index 5b77ad6..c23d833 100644
--- a/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js
+++ b/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js
@@ -1,5 +1,8 @@
 import { crop, extent, flip, resize, rotate } from './actions/index.web';
 import { getContext } from './utils/getContext.web';
+
+const SAFARI_MOBILE_CANVAS_LIMIT = 4096; 
+
 function getResults(canvas, options) {
     let uri;
     if (options) {
@@ -21,22 +24,62 @@ function getResults(canvas, options) {
         base64: uri.replace(/^data:image\/\w+;base64,/, ''),
     };
 }
+
+const isMobileSafari = () => {
+    const userAgent = navigator.userAgent;
+    return /iP(ad|od|hone)/i.test(userAgent) && /WebKit/i.test(userAgent) && !/(CriOS|FxiOS|OPiOS|mercury)/i.test(userAgent);
+};
+
+function getAdjustedCanvasSize(originalWidth, originalHeight) {
+    if(!isMobileSafari()) return { width: originalWidth, height: originalHeight }
+
+    const aspectRatio = originalWidth / originalHeight;
+
+    let newWidth;
+    let newHeight;
+
+    if (originalWidth <= SAFARI_MOBILE_CANVAS_LIMIT && originalHeight <= SAFARI_MOBILE_CANVAS_LIMIT) {
+        return { width: originalWidth, height: originalHeight };
+    }
+
+    if (aspectRatio > 1) {
+        newWidth = SAFARI_MOBILE_CANVAS_LIMIT;
+        newHeight = Math.round(newWidth / aspectRatio);
+    } else {
+        newHeight = SAFARI_MOBILE_CANVAS_LIMIT;
+        newWidth = Math.round(newHeight * aspectRatio);
+    }
+
+    if (newWidth > SAFARI_MOBILE_CANVAS_LIMIT) {
+        newWidth = SAFARI_MOBILE_CANVAS_LIMIT;
+        newHeight = Math.round(newWidth / aspectRatio);
+    } else if (newHeight > SAFARI_MOBILE_CANVAS_LIMIT) {
+        newHeight = SAFARI_MOBILE_CANVAS_LIMIT;
+        newWidth = Math.round(newHeight * aspectRatio);
+    }
+
+    return { width: newWidth, height: newHeight };
+}
+
 function loadImageAsync(uri) {
     return new Promise((resolve, reject) => {
         const imageSource = new Image();
         imageSource.crossOrigin = 'anonymous';
         const canvas = document.createElement('canvas');
+        
         imageSource.onload = () => {
-            canvas.width = imageSource.naturalWidth;
-            canvas.height = imageSource.naturalHeight;
+            const adjudstedCanvasSize = getAdjustedCanvasSize(imageSource.naturalWidth, imageSource.naturalHeight)
+            canvas.width = adjudstedCanvasSize.width;
+            canvas.height = adjudstedCanvasSize.height;
             const context = getContext(canvas);
-            context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);
+            context.drawImage(imageSource, 0, 0, adjudstedCanvasSize.width, adjudstedCanvasSize.height);
             resolve(canvas);
         };
         imageSource.onerror = () => reject(canvas);
         imageSource.src = uri;
     });
 }
+
 export default {
     get name() {
         return 'ExpoImageManipulator';
diff --git a/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js.map b/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js.map
index 83d972e..55ff4cc 100644
--- a/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js.map
+++ b/node_modules/expo-image-manipulator/build/ExpoImageManipulator.web.js.map
@@ -1 +1 @@
-{"version":3,"file":"ExpoImageManipulator.web.js","sourceRoot":"","sources":["../src/ExpoImageManipulator.web.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEpD,SAAS,UAAU,CAAC,MAAyB,EAAE,OAAqB;IAClE,IAAI,GAAW,CAAC;IAChB,IAAI,OAAO,EAAE;QACX,MAAM,EAAE,MAAM,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;QACnC,IAAI,OAAO,CAAC,MAAM,KAAK,KAAK,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,EAAE;YAC9D,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;SAC5D;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;QAChE,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,MAAM,EAAE,OAAO,CAAC,CAAC;KACpD;SAAM;QACL,+BAA+B;QAC/B,GAAG,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;KAC1B;IACD,OAAO;QACL,GAAG;QACH,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,MAAM,EAAE,MAAM,CAAC,MAAM;QACrB,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC;KACpD,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CAAC,GAAW;IACjC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,WAAW,GAAG,IAAI,KAAK,EAAE,CAAC;QAChC,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC;QACtC,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,WAAW,CAAC,MAAM,GAAG,GAAG,EAAE;YACxB,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC,YAAY,CAAC;YACxC,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC;YAE1C,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YACnC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,YAAY,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;YAE1F,OAAO,CAAC,MAAM,CAAC,CAAC;QAClB,CAAC,CAAC;QACF,WAAW,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3C,WAAW,CAAC,GAAG,GAAG,GAAG,CAAC;IACxB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,eAAe;IACb,IAAI,IAAI;QACN,OAAO,sBAAsB,CAAC;IAChC,CAAC;IACD,KAAK,CAAC,eAAe,CACnB,GAAW,EACX,UAAoB,EAAE,EACtB,OAAoB;QAEpB,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,GAAG,CAAC,CAAC;QAEjD,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YACrD,IAAI,MAAM,IAAI,MAAM,EAAE;gBACpB,OAAO,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;aAClC;iBAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;gBAC7B,OAAO,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;aACtC;iBAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;gBAC7B,OAAO,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;aACtC;iBAAM,IAAI,MAAM,IAAI,MAAM,EAAE;gBAC3B,OAAO,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;aAClC;iBAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;gBAC7B,OAAO,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;aACtC;iBAAM;gBACL,OAAO,MAAM,CAAC;aACf;QACH,CAAC,EAAE,cAAc,CAAC,CAAC;QAEnB,OAAO,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACF,CAAC","sourcesContent":["import { ImageResult, SaveOptions, Action } from './ImageManipulator.types';\nimport { crop, extent, flip, resize, rotate } from './actions/index.web';\nimport { getContext } from './utils/getContext.web';\n\nfunction getResults(canvas: HTMLCanvasElement, options?: SaveOptions): ImageResult {\n  let uri: string;\n  if (options) {\n    const { format = 'png' } = options;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    const quality = Math.min(1, Math.max(0, options.compress ?? 1));\n    uri = canvas.toDataURL('image/' + format, quality);\n  } else {\n    // defaults to PNG with no loss\n    uri = canvas.toDataURL();\n  }\n  return {\n    uri,\n    width: canvas.width,\n    height: canvas.height,\n    base64: uri.replace(/^data:image\\/\\w+;base64,/, ''),\n  };\n}\n\nfunction loadImageAsync(uri: string): Promise<HTMLCanvasElement> {\n  return new Promise((resolve, reject) => {\n    const imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    const canvas = document.createElement('canvas');\n    imageSource.onload = () => {\n      canvas.width = imageSource.naturalWidth;\n      canvas.height = imageSource.naturalHeight;\n\n      const context = getContext(canvas);\n      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n\n      resolve(canvas);\n    };\n    imageSource.onerror = () => reject(canvas);\n    imageSource.src = uri;\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoImageManipulator';\n  },\n  async manipulateAsync(\n    uri: string,\n    actions: Action[] = [],\n    options: SaveOptions\n  ): Promise<ImageResult> {\n    const originalCanvas = await loadImageAsync(uri);\n\n    const resultCanvas = actions.reduce((canvas, action) => {\n      if ('crop' in action) {\n        return crop(canvas, action.crop);\n      } else if ('extent' in action) {\n        return extent(canvas, action.extent);\n      } else if ('resize' in action) {\n        return resize(canvas, action.resize);\n      } else if ('flip' in action) {\n        return flip(canvas, action.flip);\n      } else if ('rotate' in action) {\n        return rotate(canvas, action.rotate);\n      } else {\n        return canvas;\n      }\n    }, originalCanvas);\n\n    return getResults(resultCanvas, options);\n  },\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"ExpoImageManipulator.web.js","sourceRoot":"","sources":["../src/ExpoImageManipulator.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImageResult, SaveOptions, Action } from './ImageManipulator.types';\nimport { crop, extent, flip, resize, rotate } from './actions/index.web';\nimport { getContext } from './utils/getContext.web';\n\nfunction getResults(canvas: HTMLCanvasElement, options?: SaveOptions): ImageResult {\n  let uri: string;\n  if (options) {\n    const { format = 'png' } = options;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    const quality = Math.min(1, Math.max(0, options.compress ?? 1));\n    uri = canvas.toDataURL('image/' + format, quality);\n  } else {\n    // defaults to PNG with no loss\n    uri = canvas.toDataURL();\n  }\n  return {\n    uri,\n    width: canvas.width,\n    height: canvas.height,\n    base64: uri.replace(/^data:image\\/\\w+;base64,/, ''),\n  };\n}\n\nfunction loadImageAsync(uri: string): Promise<HTMLCanvasElement> {\n  return new Promise((resolve, reject) => {\n    const imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    const canvas = document.createElement('canvas');\n    imageSource.onload = () => {\n  console.log('TEST');\n     canvas.width = 4095;\n      canvas.height = 4095;\n\n      const context = getContext(canvas);\n      context.drawImage(imageSource, 0, 0, 4095, 4095);\n\n      resolve(canvas);\n    };\n    imageSource.onerror = () => reject(canvas);\n    imageSource.src = uri;\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoImageManipulator';\n  },\n  async manipulateAsync(\n    uri: string,\n    actions: Action[] = [],\n    options: SaveOptions\n  ): Promise<ImageResult> {\n    const originalCanvas = await loadImageAsync(uri);\n\n    const resultCanvas = actions.reduce((canvas, action) => {\n      if ('crop' in action) {\n        return crop(canvas, action.crop);\n      } else if ('extent' in action) {\n        return extent(canvas, action.extent);\n      } else if ('resize' in action) {\n        return resize(canvas, action.resize);\n      } else if ('flip' in action) {\n        return flip(canvas, action.flip);\n      } else if ('rotate' in action) {\n        return rotate(canvas, action.rotate);\n      } else {\n        return canvas;\n      }\n    }, originalCanvas);\n\n    return getResults(resultCanvas, options);\n  },\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-image-manipulator/src/ExpoImageManipulator.web.ts b/node_modules/expo-image-manipulator/src/ExpoImageManipulator.web.ts
index 0bd8cee..c0ef5ea 100644
--- a/node_modules/expo-image-manipulator/src/ExpoImageManipulator.web.ts
+++ b/node_modules/expo-image-manipulator/src/ExpoImageManipulator.web.ts
@@ -24,16 +24,17 @@ function getResults(canvas: HTMLCanvasElement, options?: SaveOptions): ImageResu
 }
 
 function loadImageAsync(uri: string): Promise<HTMLCanvasElement> {
+  console.log('LOAD ASYNC')
   return new Promise((resolve, reject) => {
     const imageSource = new Image();
     imageSource.crossOrigin = 'anonymous';
     const canvas = document.createElement('canvas');
     imageSource.onload = () => {
-      canvas.width = imageSource.naturalWidth;
-      canvas.height = imageSource.naturalHeight;
+      canvas.width = 4095;
+      canvas.height = 4095;
 
       const context = getContext(canvas);
-      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);
+      context.drawImage(imageSource, 0, 0, 4095, 4095);
 
       resolve(canvas);
     };
diff --git a/node_modules/expo-image-manipulator/src/ImageManipulator.ts b/node_modules/expo-image-manipulator/src/ImageManipulator.ts
index 2a9100d..f6b6626 100644
--- a/node_modules/expo-image-manipulator/src/ImageManipulator.ts
+++ b/node_modules/expo-image-manipulator/src/ImageManipulator.ts
@@ -21,6 +21,8 @@ export async function manipulateAsync(
   actions: Action[] = [],
   saveOptions: SaveOptions = {}
 ): Promise<ImageResult> {
+
+  console.log('MANIPULATE')
   if (!ExpoImageManipulator.manipulateAsync) {
     throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');
   }
