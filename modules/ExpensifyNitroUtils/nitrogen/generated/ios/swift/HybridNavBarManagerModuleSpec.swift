///
/// HybridNavBarManagerModuleSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNavBarManagerModuleSpec``
public protocol HybridNavBarManagerModuleSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func setButtonStyle(style: NavBarButtonStyle) throws -> Void
  func getType() throws -> String
}

/// See ``HybridNavBarManagerModuleSpec``
open class HybridNavBarManagerModuleSpec_base {
  private weak var cxxWrapper: HybridNavBarManagerModuleSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNavBarManagerModuleSpec_cxx {
  #if DEBUG
    guard self is HybridNavBarManagerModuleSpec else {
      fatalError("`self` is not a `HybridNavBarManagerModuleSpec`! Did you accidentally inherit from `HybridNavBarManagerModuleSpec_base` instead of `HybridNavBarManagerModuleSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNavBarManagerModuleSpec_cxx(self as! HybridNavBarManagerModuleSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NavBarManagerModule HybridObject.
 * Implement this protocol to create Swift-based instances of NavBarManagerModule.
 * ```swift
 * class HybridNavBarManagerModule : HybridNavBarManagerModuleSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNavBarManagerModuleSpec = HybridNavBarManagerModuleSpec_protocol & HybridNavBarManagerModuleSpec_base
