import HybridAppModule from '@expensify/react-native-hybrid-app';
import Onyx from 'react-native-onyx';
import type {OnyxEntry} from 'react-native-onyx';
import CONFIG from '@src/CONFIG';
import CONST from '@src/CONST';
import ONYXKEYS from '@src/ONYXKEYS';
import type {Credentials, HybridApp, Session, TryNewDot} from '@src/types/onyx';
import * as HybridAppActions from './actions/HybridApp';
import Log from './Log';
import {getCurrentUserEmail} from './Network/NetworkStore';

let currentHybridApp: OnyxEntry<HybridApp>;
let currentTryNewDot: OnyxEntry<TryNewDot>;
let currentCredentials: OnyxEntry<Credentials>;

// this code fixes bug on backend side, remove it once backend is fixed
Onyx.connect({
    key: 'tryNewDot',
    callback: (tryNewDot) => {
        Onyx.merge(ONYXKEYS.NVP_TRYNEWDOT, tryNewDot);
    },
});

Onyx.connect({
    key: ONYXKEYS.HYBRID_APP,
    callback: (hybridApp) => {
        handleChangeInHybridAppSignInFlow(hybridApp, currentTryNewDot, currentCredentials);
    },
});

Onyx.connect({
    key: ONYXKEYS.NVP_TRYNEWDOT,
    callback: (tryNewDot) => {
        handleChangeInHybridAppSignInFlow(currentHybridApp, tryNewDot, currentCredentials);
    },
});

Onyx.connect({
    key: ONYXKEYS.CREDENTIALS,
    callback: (credentials) => {
        currentCredentials = credentials;
        handleChangeInHybridAppSignInFlow(currentHybridApp, currentTryNewDot, credentials);
    },
});

let currentSession: OnyxEntry<Session>;
Onyx.connect({
    key: ONYXKEYS.SESSION,
    callback: (session: OnyxEntry<Session>) => {
        if (!currentSession?.authToken && session?.authToken && currentHybridApp?.newDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.STARTED) {
            HybridAppActions.setNewDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED);
        }
        currentSession = session;
    },
});

let activePolicyID: OnyxEntry<string>;
Onyx.connect({
    key: ONYXKEYS.NVP_ACTIVE_POLICY_ID,
    callback: (newActivePolicyID) => {
        activePolicyID = newActivePolicyID;
    },
});

function shouldUseOldApp(tryNewDot?: TryNewDot) {
    return tryNewDot?.classicRedirect.dismissed === true;
}

function handleChangeInHybridAppSignInFlow(hybridApp: OnyxEntry<HybridApp>, tryNewDot: OnyxEntry<TryNewDot>, credentials: OnyxEntry<Credentials>) {
    if (!CONFIG.IS_HYBRID_APP) {
        return;
    }

    if (!hybridApp?.useNewDotSignInPage) {
        currentHybridApp = hybridApp;
        currentTryNewDot = tryNewDot;
        return;
    }

    if (hybridApp?.newDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED && tryNewDot !== undefined && !!credentials?.autoGeneratedLogin && !!credentials?.autoGeneratedPassword) {
        Log.info(`[HybridApp] Performing sign-in${shouldUseOldApp(tryNewDot) ? '' : ' (in background)'} on OldDot side`);
        HybridAppModule.signInToOldDot({
            autoGeneratedLogin: credentials.autoGeneratedLogin,
            autoGeneratedPassword: credentials.autoGeneratedPassword,
            authToken: currentSession?.authToken ?? '',
            email: getCurrentUserEmail() ?? '',
            policyID: activePolicyID ?? '',
        });
        HybridAppActions.setUseNewDotSignInPage(false).then(() => {
            if (shouldUseOldApp(tryNewDot)) {
                HybridAppModule.closeReactNativeApp({shouldSignOut: false, shouldSetNVP: false});
            } else {
                Log.info('[HybridApp] The user should see NewDot. There is no need to block the user on the `SignInPage` until the sign-in process is completed on the OldDot side.');
                HybridAppActions.setReadyToShowAuthScreens(true);
            }
        });
    }

    currentHybridApp = hybridApp;
    currentTryNewDot = tryNewDot;
}
