import {DeviceEventEmitter, NativeModules} from 'react-native';
import Onyx from 'react-native-onyx';
import type {OnyxEntry} from 'react-native-onyx';
import CONST from '@src/CONST';
import ONYXKEYS from '@src/ONYXKEYS';
import type {Credentials, HybridApp, Session, TryNewDot} from '@src/types/onyx';
import * as HybridAppActions from './actions/HybridApp';
import type {Init} from './ActiveClientManager/types';
import Log from './Log';

let currentHybridApp: OnyxEntry<HybridApp>;
let currentTryNewDot: OnyxEntry<TryNewDot>;

Onyx.connect({
    key: ONYXKEYS.HYBRID_APP,
    callback: (hybridApp) => {
        console.debug('Last hybridApp value', {hybridApp});
        handleSignInFlow(hybridApp, currentTryNewDot);
    },
});

Onyx.connect({
    key: ONYXKEYS.NVP_TRYNEWDOT,
    callback: (tryNewDot) => {
        console.debug('Last tryNewDot value', {tryNewDot});
        handleSignInFlow(currentHybridApp, tryNewDot);
    },
});

let currentSession: OnyxEntry<Session>;
Onyx.connect({
    key: ONYXKEYS.SESSION,
    callback: (session: OnyxEntry<Session>) => {
        if (!currentSession?.authToken && session?.authToken && currentHybridApp?.newDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.STARTED) {
            HybridAppActions.setNewDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED);
        }
        currentSession = session;
    },
});

let credentials: OnyxEntry<Credentials>;
Onyx.connect({
    key: ONYXKEYS.CREDENTIALS,
    callback: (newCredentials) => {
        credentials = newCredentials;
    },
});

function shouldUseOldApp(tryNewDot?: TryNewDot) {
    return tryNewDot?.classicRedirect.dismissed === true;
}

function handleSignInFlow(hybridApp: OnyxEntry<HybridApp>, tryNewDot: OnyxEntry<TryNewDot>) {
    if (!NativeModules.HybridAppModule) {
        return;
    }

    if (currentHybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.RETRYING_AFTER_FAILURE && hybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED) {
        if (hybridApp?.oldDotSignInError) {
            Log.info('[HybridApp] Unable to open OldDot. Sign-in has failed again');
            HybridAppActions.setOldDotSignInState(CONST.HYBRID_APP_SIGN_IN_STATE.FAILED_AGAIN);
            return;
        }

        Log.info('[HybridApp] Closing NewDot as retrying sign-in to OldDot succeeded');
        NativeModules.HybridAppModule.closeReactNativeApp(false, true);
    }

    if (
        currentHybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.STARTED &&
        hybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED &&
        tryNewDot !== undefined &&
        shouldUseOldApp(tryNewDot)
    ) {
        if (hybridApp?.oldDotSignInError) {
            Log.info('[HybridApp] Unable to open OldDot. Sign-in has failed');
            return;
        }

        Log.info('[HybridApp] Closing NewDot as sign-in to OldDot succeeded');
        NativeModules.HybridAppModule.closeReactNativeApp(false, false);
    }

    if (
        hybridApp?.newDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED &&
        hybridApp?.oldDotSignInState === CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED &&
        credentials?.autoGeneratedLogin &&
        credentials?.autoGeneratedPassword &&
        tryNewDot !== undefined
    ) {
        if (!shouldUseOldApp(tryNewDot)) {
            Log.info('[HybridApp] The user should see NewDot. There is no need to block the user on the `SignInPage` until the sign-in process is completed on the OldDot side.');
            HybridAppActions.setReadyToShowAuthScreens(true);
        }

        Log.info(`[HybridApp] Performing sign-in${shouldUseOldApp(tryNewDot) ? '' : ' (in background)'} on OldDot side`);
        HybridAppActions.startOldDotSignIn(credentials.autoGeneratedLogin, credentials.autoGeneratedPassword);
    }

    currentHybridApp = hybridApp;
    currentTryNewDot = tryNewDot;
}

function onOldDotSignInFinished(data: string) {
    const eventData = JSON.parse(data) as {errorMessage: string};
    Log.info(`[HybridApp] onSignInFinished event received`, true, {eventData});
    HybridAppActions.finishOldDotSignIn(eventData.errorMessage);
}

const init: Init = () => {
    if (!NativeModules.HybridAppModule) {
        return;
    }

    // Setup event listeners
    DeviceEventEmitter.addListener(CONST.EVENTS.HYBRID_APP.ON_SIGN_IN_FINISHED, onOldDotSignInFinished);
};

export default {init};

export {shouldUseOldApp};
