import {NativeModules} from 'react-native';
import Onyx from 'react-native-onyx';
import type {ValueOf} from 'type-fest';
import CONST from '@src/CONST';
import ONYXKEYS from '@src/ONYXKEYS';
import type {HybridApp} from '@src/types/onyx';
import type HybridAppSettings from './types';

function parseHybridAppSettings(hybridAppSettings: string): HybridAppSettings {
    return JSON.parse(hybridAppSettings) as HybridAppSettings;
}

function setOldDotSignInError(oldDotSignInError: string | null) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {oldDotSignInError});
}

function setReadyToShowAuthScreens(readyToShowAuthScreens: boolean) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {readyToShowAuthScreens});
}

function setUseNewDotSignInPage(useNewDotSignInPage: boolean) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {useNewDotSignInPage});
}

function setLoggedOutFromOldDot(loggedOutFromOldDot: boolean) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {loggedOutFromOldDot});
}

function setNewDotSignInState(newDotSignInState: ValueOf<typeof CONST.HYBRID_APP_SIGN_IN_STATE>) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {newDotSignInState});
}

function setOldDotSignInState(oldDotSignInState: ValueOf<typeof CONST.HYBRID_APP_SIGN_IN_STATE>) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {oldDotSignInState});
}

function resetHybridAppSignInState() {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {
        readyToShowAuthScreens: false,
        useNewDotSignInPage: true,
        oldDotSignInError: null,
        oldDotSignInState: CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED,
        newDotSignInState: CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED,
    });
}

function startOldDotSignIn(autoGeneratedLogin: string, autoGeneratedPassword: string) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {
        oldDotSignInState: CONST.HYBRID_APP_SIGN_IN_STATE.STARTED,
    });

    NativeModules.HybridAppModule.signInToOldDot(autoGeneratedLogin, autoGeneratedPassword);
}

function retryOldDotSignInAfterFailure(autoGeneratedLogin: string, autoGeneratedPassword: string) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {
        oldDotSignInError: null,
        oldDotSignInState: CONST.HYBRID_APP_SIGN_IN_STATE.RETRYING_AFTER_FAILURE,
    });

    NativeModules.HybridAppModule.signInToOldDot(autoGeneratedLogin, autoGeneratedPassword);
}

function finishOldDotSignIn(errorMessage: string | null) {
    Onyx.merge(ONYXKEYS.HYBRID_APP, {
        oldDotSignInError: errorMessage,
        oldDotSignInState: CONST.HYBRID_APP_SIGN_IN_STATE.FINISHED,
    });
}

function prepareHybridAppAfterTransitionToNewDot(hybridApp: HybridApp) {
    if (hybridApp?.useNewDotSignInPage) {
        return Onyx.merge(ONYXKEYS.HYBRID_APP, {
            ...hybridApp,
            readyToShowAuthScreens: false,
            oldDotSignInError: null,
            oldDotSignInState: CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED,
            newDotSignInState: CONST.HYBRID_APP_SIGN_IN_STATE.NOT_STARTED,
        });
    }

    return Onyx.merge(ONYXKEYS.HYBRID_APP, {
        ...hybridApp,
        readyToShowAuthScreens: true,
    });
}

export {
    parseHybridAppSettings,
    setOldDotSignInError,
    setReadyToShowAuthScreens,
    setUseNewDotSignInPage,
    setLoggedOutFromOldDot,
    setNewDotSignInState,
    setOldDotSignInState,
    resetHybridAppSignInState,
    retryOldDotSignInAfterFailure,
    finishOldDotSignIn,
    startOldDotSignIn,
    prepareHybridAppAfterTransitionToNewDot,
};
